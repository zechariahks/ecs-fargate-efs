Transform: AWS::CodeDeployBlueGreen
Resources:
  MyVpcF9F0CA6F:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: EcsFargateEfsStack/MyVpc
    Metadata:
      aws:cdk:path: EcsFargateEfsStack/MyVpc/Resource
  MyVpcPublicSubnet1SubnetF6608456:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/18
      VpcId:
        Ref: MyVpcF9F0CA6F
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: EcsFargateEfsStack/MyVpc/PublicSubnet1
    Metadata:
      aws:cdk:path: EcsFargateEfsStack/MyVpc/PublicSubnet1/Subnet
  MyVpcPublicSubnet1RouteTableC46AB2F4:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MyVpcF9F0CA6F
      Tags:
        - Key: Name
          Value: EcsFargateEfsStack/MyVpc/PublicSubnet1
    Metadata:
      aws:cdk:path: EcsFargateEfsStack/MyVpc/PublicSubnet1/RouteTable
  MyVpcPublicSubnet1RouteTableAssociation2ECEE1CB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyVpcPublicSubnet1RouteTableC46AB2F4
      SubnetId:
        Ref: MyVpcPublicSubnet1SubnetF6608456
    Metadata:
      aws:cdk:path: EcsFargateEfsStack/MyVpc/PublicSubnet1/RouteTableAssociation
  MyVpcPublicSubnet1DefaultRoute95FDF9EB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: MyVpcPublicSubnet1RouteTableC46AB2F4
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: MyVpcIGW5C4A4F63
    DependsOn:
      - MyVpcVPCGW488ACE0D
    Metadata:
      aws:cdk:path: EcsFargateEfsStack/MyVpc/PublicSubnet1/DefaultRoute
  MyVpcPublicSubnet1EIP096967CB:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: EcsFargateEfsStack/MyVpc/PublicSubnet1
    Metadata:
      aws:cdk:path: EcsFargateEfsStack/MyVpc/PublicSubnet1/EIP
  MyVpcPublicSubnet1NATGatewayAD3400C1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - MyVpcPublicSubnet1EIP096967CB
          - AllocationId
      SubnetId:
        Ref: MyVpcPublicSubnet1SubnetF6608456
      Tags:
        - Key: Name
          Value: EcsFargateEfsStack/MyVpc/PublicSubnet1
    Metadata:
      aws:cdk:path: EcsFargateEfsStack/MyVpc/PublicSubnet1/NATGateway
  MyVpcPublicSubnet2Subnet492B6BFB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.64.0/18
      VpcId:
        Ref: MyVpcF9F0CA6F
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: EcsFargateEfsStack/MyVpc/PublicSubnet2
    Metadata:
      aws:cdk:path: EcsFargateEfsStack/MyVpc/PublicSubnet2/Subnet
  MyVpcPublicSubnet2RouteTable1DF17386:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MyVpcF9F0CA6F
      Tags:
        - Key: Name
          Value: EcsFargateEfsStack/MyVpc/PublicSubnet2
    Metadata:
      aws:cdk:path: EcsFargateEfsStack/MyVpc/PublicSubnet2/RouteTable
  MyVpcPublicSubnet2RouteTableAssociation227DE78D:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyVpcPublicSubnet2RouteTable1DF17386
      SubnetId:
        Ref: MyVpcPublicSubnet2Subnet492B6BFB
    Metadata:
      aws:cdk:path: EcsFargateEfsStack/MyVpc/PublicSubnet2/RouteTableAssociation
  MyVpcPublicSubnet2DefaultRoute052936F6:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: MyVpcPublicSubnet2RouteTable1DF17386
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: MyVpcIGW5C4A4F63
    DependsOn:
      - MyVpcVPCGW488ACE0D
    Metadata:
      aws:cdk:path: EcsFargateEfsStack/MyVpc/PublicSubnet2/DefaultRoute
  MyVpcPublicSubnet2EIP8CCBA239:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: EcsFargateEfsStack/MyVpc/PublicSubnet2
    Metadata:
      aws:cdk:path: EcsFargateEfsStack/MyVpc/PublicSubnet2/EIP
  MyVpcPublicSubnet2NATGateway91BFBEC9:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - MyVpcPublicSubnet2EIP8CCBA239
          - AllocationId
      SubnetId:
        Ref: MyVpcPublicSubnet2Subnet492B6BFB
      Tags:
        - Key: Name
          Value: EcsFargateEfsStack/MyVpc/PublicSubnet2
    Metadata:
      aws:cdk:path: EcsFargateEfsStack/MyVpc/PublicSubnet2/NATGateway
  MyVpcPrivateSubnet1Subnet5057CF7E:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.128.0/18
      VpcId:
        Ref: MyVpcF9F0CA6F
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: EcsFargateEfsStack/MyVpc/PrivateSubnet1
    Metadata:
      aws:cdk:path: EcsFargateEfsStack/MyVpc/PrivateSubnet1/Subnet
  MyVpcPrivateSubnet1RouteTable8819E6E2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MyVpcF9F0CA6F
      Tags:
        - Key: Name
          Value: EcsFargateEfsStack/MyVpc/PrivateSubnet1
    Metadata:
      aws:cdk:path: EcsFargateEfsStack/MyVpc/PrivateSubnet1/RouteTable
  MyVpcPrivateSubnet1RouteTableAssociation56D38C7E:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyVpcPrivateSubnet1RouteTable8819E6E2
      SubnetId:
        Ref: MyVpcPrivateSubnet1Subnet5057CF7E
    Metadata:
      aws:cdk:path: EcsFargateEfsStack/MyVpc/PrivateSubnet1/RouteTableAssociation
  MyVpcPrivateSubnet1DefaultRouteA8CDE2FA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: MyVpcPrivateSubnet1RouteTable8819E6E2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: MyVpcPublicSubnet1NATGatewayAD3400C1
    Metadata:
      aws:cdk:path: EcsFargateEfsStack/MyVpc/PrivateSubnet1/DefaultRoute
  MyVpcPrivateSubnet2Subnet0040C983:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.192.0/18
      VpcId:
        Ref: MyVpcF9F0CA6F
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: EcsFargateEfsStack/MyVpc/PrivateSubnet2
    Metadata:
      aws:cdk:path: EcsFargateEfsStack/MyVpc/PrivateSubnet2/Subnet
  MyVpcPrivateSubnet2RouteTableCEDCEECE:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MyVpcF9F0CA6F
      Tags:
        - Key: Name
          Value: EcsFargateEfsStack/MyVpc/PrivateSubnet2
    Metadata:
      aws:cdk:path: EcsFargateEfsStack/MyVpc/PrivateSubnet2/RouteTable
  MyVpcPrivateSubnet2RouteTableAssociation86A610DA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyVpcPrivateSubnet2RouteTableCEDCEECE
      SubnetId:
        Ref: MyVpcPrivateSubnet2Subnet0040C983
    Metadata:
      aws:cdk:path: EcsFargateEfsStack/MyVpc/PrivateSubnet2/RouteTableAssociation
  MyVpcPrivateSubnet2DefaultRoute9CE96294:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: MyVpcPrivateSubnet2RouteTableCEDCEECE
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: MyVpcPublicSubnet2NATGateway91BFBEC9
    Metadata:
      aws:cdk:path: EcsFargateEfsStack/MyVpc/PrivateSubnet2/DefaultRoute
  MyVpcIGW5C4A4F63:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: EcsFargateEfsStack/MyVpc
    Metadata:
      aws:cdk:path: EcsFargateEfsStack/MyVpc/IGW
  MyVpcVPCGW488ACE0D:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: MyVpcF9F0CA6F
      InternetGatewayId:
        Ref: MyVpcIGW5C4A4F63
    Metadata:
      aws:cdk:path: EcsFargateEfsStack/MyVpc/VPCGW
  FargateCluster7CCD5F93:
    Type: AWS::ECS::Cluster
    Metadata:
      aws:cdk:path: EcsFargateEfsStack/FargateCluster/Resource
  efssecurityA81D59F7:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EcsFargateEfsStack/efs-security
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: MyVpcF9F0CA6F
    Metadata:
      aws:cdk:path: EcsFargateEfsStack/efs-security/Resource
  efssecurityfromEcsFargateEfsStackserviceSG8DA6106320490369AE29:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: from EcsFargateEfsStackserviceSG8DA61063:2049
      FromPort: 2049
      GroupId:
        Fn::GetAtt:
          - efssecurityA81D59F7
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - serviceSGDB145FE1
          - GroupId
      ToPort: 2049
    Metadata:
      aws:cdk:path: EcsFargateEfsStack/efs-security/from EcsFargateEfsStackserviceSG8DA61063:2049
  serviceSGDB145FE1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EcsFargateEfsStack/serviceSG
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - SourceSecurityGroupId:
            Fn::GetAtt:
              - LoadBalancerSecurityGroupA28D6DD7
              - GroupId
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - SourceSecurityGroupId:
            Fn::GetAtt:
              - LoadBalancerSecurityGroupA28D6DD7
              - GroupId
          Description: Allow from anyone on port 8080
          FromPort: 8080
          IpProtocol: tcp
          ToPort: 8080
      VpcId:
        Ref: MyVpcF9F0CA6F
    Metadata:
      aws:cdk:path: EcsFargateEfsStack/serviceSG/Resource
  efs6C17982A:
    Type: AWS::EFS::FileSystem
    Properties:
      BackupPolicy:
        Status: ENABLED
      Encrypted: true
      FileSystemTags:
        - Key: Name
          Value: EcsFargateEfsStack/efs
      LifecyclePolicies:
        - TransitionToIA: AFTER_60_DAYS
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: EcsFargateEfsStack/efs/Resource
  efsEfsMountTarget1CAFBA94A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: efs6C17982A
      SecurityGroups:
        - Fn::GetAtt:
            - efssecurityA81D59F7
            - GroupId
      SubnetId:
        Ref: MyVpcPrivateSubnet1Subnet5057CF7E
    Metadata:
      aws:cdk:path: EcsFargateEfsStack/efs/EfsMountTarget1
  efsEfsMountTarget25C852BF4:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: efs6C17982A
      SecurityGroups:
        - Fn::GetAtt:
            - efssecurityA81D59F7
            - GroupId
      SubnetId:
        Ref: MyVpcPrivateSubnet2Subnet0040C983
    Metadata:
      aws:cdk:path: EcsFargateEfsStack/efs/EfsMountTarget2
  EcsEfsTaskExecutionRole8D18B05A:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: EcsFargateEfsStack/EcsEfsTaskExecutionRole/Resource
  codedeploybleugreenhookroleD8BCA5FB:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AWSCodeDeployFullAccess
      RoleName: codedeploybleugreenhookrole
    Metadata:
      aws:cdk:path: EcsFargateEfsStack/codedeploybleugreenhookrole/Resource
  BlueTaskDefinitionTaskRole2A0CE9CA:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: EcsFargateEfsStack/BlueTaskDefinition/TaskRole/Resource
  BlueTaskDefinitionD77B7F7A:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: nginxdemos/hello:latest
          MountPoints:
            - ContainerPath: /var/lib/efspath
              ReadOnly: true
              SourceVolume: myefs
          Name: ecs-efs-containerdef
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
      Cpu: "256"
      ExecutionRoleArn:
        Fn::GetAtt:
          - EcsEfsTaskExecutionRole8D18B05A
          - Arn
      Family: ecs-efs
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Fn::GetAtt:
          - BlueTaskDefinitionTaskRole2A0CE9CA
          - Arn
      Volumes:
        - Name: myefs
          EfsVolumeConfiguration:
            TransitEncryption: ENABLED
            FileSystemId:
              Ref: efs6C17982A
    Metadata:
      aws:cdk:path: EcsFargateEfsStack/BlueTaskDefinition/Resource
  LoadBalancerBE9EEC3A:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: "false"
      Scheme: internet-facing
      SecurityGroups:
        - Fn::GetAtt:
            - LoadBalancerSecurityGroupA28D6DD7
            - GroupId
      Subnets:
        - Ref: MyVpcPublicSubnet1SubnetF6608456
        - Ref: MyVpcPublicSubnet2Subnet492B6BFB
      Type: application
    DependsOn:
      - MyVpcPublicSubnet1DefaultRoute95FDF9EB
      - MyVpcPublicSubnet2DefaultRoute052936F6
    Metadata:
      aws:cdk:path: EcsFargateEfsStack/LoadBalancer/Resource
  LoadBalancerSecurityGroupA28D6DD7:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatically created Security Group for ELB EcsFargateEfsStackLoadBalancer90D01A26
      SecurityGroupEgress:
        - CidrIp: 255.255.255.255/32
          Description: Disallow all traffic
          FromPort: 252
          IpProtocol: icmp
          ToPort: 86
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 8080
          FromPort: 8080
          IpProtocol: tcp
          ToPort: 8080
      VpcId:
        Ref: MyVpcF9F0CA6F
    Metadata:
      aws:cdk:path: EcsFargateEfsStack/LoadBalancer/SecurityGroup/Resource
  LoadBalancerProdListenerC5803EFD:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: ALBTargetGroupBlue8419EC11
          Type: forward
      LoadBalancerArn:
        Ref: LoadBalancerBE9EEC3A
      Port: 80
      Protocol: HTTP
    Metadata:
      aws:cdk:path: EcsFargateEfsStack/LoadBalancer/ProdListener/Resource
  LoadBalancerTestListenerB9671EB8:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: ALBTargetGroupGreenACEF9CF6
          Type: forward
      LoadBalancerArn:
        Ref: LoadBalancerBE9EEC3A
      Port: 8080
      Protocol: HTTP
    Metadata:
      aws:cdk:path: EcsFargateEfsStack/LoadBalancer/TestListener/Resource
  ALBTargetGroupBlue8419EC11:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Ref: MyVpcF9F0CA6F
    Metadata:
      aws:cdk:path: EcsFargateEfsStack/ALBTargetGroupBlue/Resource
  ALBTargetGroupGreenACEF9CF6:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Ref: MyVpcF9F0CA6F
    Metadata:
      aws:cdk:path: EcsFargateEfsStack/ALBTargetGroupGreen/Resource
  ecsefsfargate:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Ref: FargateCluster7CCD5F93
      DeploymentController:
        Type: EXTERNAL
      DesiredCount: 2
    Metadata:
      aws:cdk:path: EcsFargateEfsStack/ecs-efs-fargate
  BlueTaskSet:
    Type: AWS::ECS::TaskSet
    Properties:
      Cluster:
        Ref: FargateCluster7CCD5F93
      Service:
        Fn::GetAtt:
          - ecsefsfargate
          - Name
      TaskDefinition:
        Ref: BlueTaskDefinitionD77B7F7A
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: ecs-efs-containerdef
          ContainerPort: 80
          TargetGroupArn:
            Ref: ALBTargetGroupBlue8419EC11
      NetworkConfiguration:
        AwsVpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::GetAtt:
                - serviceSGDB145FE1
                - GroupId
          Subnets:
            - Ref: MyVpcPrivateSubnet1Subnet5057CF7E
            - Ref: MyVpcPrivateSubnet2Subnet0040C983
      PlatformVersion: 1.4.0
      Scale:
        Unit: PERCENT
        Value: 50
    Metadata:
      aws:cdk:path: EcsFargateEfsStack/BlueTaskSet
  PrimaryTaskSet:
    Type: AWS::ECS::PrimaryTaskSet
    Properties:
      Cluster:
        Ref: FargateCluster7CCD5F93
      Service:
        Fn::GetAtt:
          - ecsefsfargate
          - Name
      TaskSetId:
        Fn::GetAtt:
          - BlueTaskSet
          - Id
    Metadata:
      aws:cdk:path: EcsFargateEfsStack/PrimaryTaskSet
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Modules: aws-cdk=1.73.0,@aws-cdk/assets=1.73.0,@aws-cdk/aws-applicationautoscaling=1.73.0,@aws-cdk/aws-autoscaling=1.73.0,@aws-cdk/aws-autoscaling-common=1.73.0,@aws-cdk/aws-autoscaling-hooktargets=1.73.0,@aws-cdk/aws-cloudwatch=1.73.0,@aws-cdk/aws-codeguruprofiler=1.73.0,@aws-cdk/aws-ec2=1.73.0,@aws-cdk/aws-ecr=1.73.0,@aws-cdk/aws-ecr-assets=1.73.0,@aws-cdk/aws-ecs=1.73.0,@aws-cdk/aws-efs=1.73.0,@aws-cdk/aws-elasticloadbalancingv2=1.73.0,@aws-cdk/aws-events=1.73.0,@aws-cdk/aws-iam=1.73.0,@aws-cdk/aws-kms=1.73.0,@aws-cdk/aws-lambda=1.73.0,@aws-cdk/aws-logs=1.73.0,@aws-cdk/aws-s3=1.73.0,@aws-cdk/aws-s3-assets=1.73.0,@aws-cdk/aws-servicediscovery=1.73.0,@aws-cdk/aws-sns=1.73.0,@aws-cdk/aws-sns-subscriptions=1.73.0,@aws-cdk/aws-sqs=1.73.0,@aws-cdk/aws-ssm=1.73.0,@aws-cdk/cloud-assembly-schema=1.73.0,@aws-cdk/core=1.73.0,@aws-cdk/custom-resources=1.73.0,@aws-cdk/cx-api=1.73.0,@aws-cdk/region-info=1.73.0,jsii-runtime=node.js/v14.15.0
    Metadata:
      aws:cdk:path: EcsFargateEfsStack/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Hooks:
  CodeDeployBlueGreenHook:
    Type: AWS::CodeDeploy::BlueGreen
    Properties:
      ServiceRole: codedeploybleugreenhookrole
      Applications:
        - Target:
            Type: AWS::ECS::Service
            LogicalID: ecs-efs-fargate
          ECSAttributes:
            TaskDefinitions:
              - BlueTaskDefinition
              - GreeTaskDefinition
            TaskSets:
              - BlueTaskset
              - GreenTaskset
            TrafficRouting:
              ProdTrafficRoute:
                Type: AWS::ElasticLoadBalancingV2::Listener
                LogicalID: ProdListener
              TestTrafficRoute:
                Type: AWS::ElasticLoadBalancingV2::Listener
                LogicalID: TestListener
              TargetGroups:
                - ALBTargetGroupBlue
                - ALBTargetGroupGreen
      TrafficRoutingConfig:
        Type: AllAtOnce
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2

